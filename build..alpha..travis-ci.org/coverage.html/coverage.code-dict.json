{"/home/travis/build/npmtest/node-npmtest-fetch-mock/test.js":"/* istanbul instrument in package npmtest_fetch_mock */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-fetch-mock/lib.npmtest_fetch_mock.js":"/* istanbul instrument in package npmtest_fetch_mock */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_fetch_mock = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_fetch_mock = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-fetch-mock/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-fetch-mock && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_fetch_mock */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_fetch_mock\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_fetch_mock.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_fetch_mock.rollup.js'] =\n            local.assetsDict['/assets.npmtest_fetch_mock.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_fetch_mock.__dirname + '/lib.npmtest_fetch_mock.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-fetch-mock/node_modules/fetch-mock/src/server.js":"'use strict';\nconst fetch = require('node-fetch');\nconst Request = fetch.Request;\nconst Response = fetch.Response;\nconst Headers = fetch.Headers;\nconst stream = require('stream');\nconst FetchMock = require('./fetch-mock');\nconst http = require('http');\n\nFetchMock.global = global;\nFetchMock.statusTextMap = http.STATUS_CODES;\nFetchMock.stream = stream;\n\nFetchMock.setImplementations({\n\tPromise: Promise,\n\tRequest: Request,\n\tResponse: Response,\n\tHeaders: Headers\n});\n\nmodule.exports = new FetchMock()","/home/travis/build/npmtest/node-npmtest-fetch-mock/node_modules/fetch-mock/src/fetch-mock.js":"'use strict';\n\nconst compileRoute = require('./compile-route');\n\nconst FetchMock = function () {\n\n\tthis.routes = [];\n\tthis._calls = {};\n\tthis._matchedCalls = [];\n\tthis._unmatchedCalls = [];\n\tthis.bindMethods();\n}\n\nFetchMock.prototype.bindMethods = function () {\n\tthis.fetchMock = FetchMock.prototype.fetchMock.bind(this);\n\tthis.restore = FetchMock.prototype.restore.bind(this);\n\tthis.reset = FetchMock.prototype.reset.bind(this);\n}\n\nFetchMock.prototype.mock = function (matcher, response, options) {\n\n\tlet route;\n\n\t// Handle the variety of parameters accepted by mock (see README)\n\tif (matcher && response && options) {\n\t\troute = Object.assign({\n\t\t\tmatcher,\n\t\t\tresponse\n\t\t}, options);\n\t} else if (matcher && response) {\n\t\troute = {\n\t\t\tmatcher,\n\t\t\tresponse\n\t\t}\n\t} else if (matcher && matcher.matcher) {\n\t\troute = matcher\n\t} else {\n\t\tthrow new Error('Invalid parameters passed to fetch-mock')\n\t}\n\n\n\tthis.addRoute(route);\n\n\treturn this._mock();\n}\n\nFetchMock.prototype.once = function (matcher, response, options) {\n\treturn this.mock(matcher, response, Object.assign({}, options, {times: 1}));\n}\n\nFetchMock.prototype._mock = function () {\n\tif (!this.isSandbox) {\n\t\t// Do this here rather than in the constructor to ensure it's scoped to the test\n\t\tthis.realFetch = this.realFetch || FetchMock.global.fetch;\n\t\tFetchMock.global.fetch = this.fetchMock;\n\t}\n\treturn this;\n}\n\nFetchMock.prototype._unMock = function () {\n\tif (this.realFetch) {\n\t\tFetchMock.global.fetch = this.realFetch;\n\t\tthis.realFetch = null;\n\t}\n\tthis.fallbackResponse = null;\n\treturn this;\n}\n\nFetchMock.prototype.catch = function (response) {\n\tif (this.fallbackResponse) {\n\t\tconsole.warn(`calling fetchMock.catch() twice - are you sure you want to overwrite the previous fallback response`);\n\t}\n\tthis.fallbackResponse = response || 'ok';\n\treturn this._mock();\n}\n\nFetchMock.prototype.spy = function () {\n\tthis._mock();\n\treturn this.catch(this.realFetch)\n}\n\nFetchMock.prototype.fetchMock = function (url, opts) {\n\tconst Promise = this.Promise || FetchMock.Promise;\n\tlet response = this.router(url, opts);\n\n\tif (!response) {\n\t\tconsole.warn(`Unmatched ${opts && opts.method || 'GET'} to ${url}`);\n\t\tthis.push(null, [url, opts]);\n\n\t\tif (this.fallbackResponse) {\n\t\t\tresponse = this.fallbackResponse;\n\t\t} else {\n\t\t\tthrow new Error(`No fallback response defined for ${opts && opts.method || 'GET'} to ${url}`)\n\t\t}\n\t}\n\n\tif (typeof response === 'function') {\n\t\tresponse = response (url, opts);\n\t}\n\n\tif (typeof response.then === 'function') {\n\t\tlet responsePromise = response.then(response => this.mockResponse(url, response, opts));\n\t\treturn Promise.resolve(responsePromise); // Ensure Promise is always our implementation.\n\t} else {\n\t\treturn this.mockResponse(url, response, opts);\n\t}\n\n}\n\nFetchMock.prototype.router = function (url, opts) {\n\tlet route;\n\tfor (let i = 0, il = this.routes.length; i < il ; i++) {\n\t\troute = this.routes[i];\n\t\tif (route.matcher(url, opts)) {\n\t\t\tthis.push(route.name, [url, opts]);\n\t\t\treturn route.response;\n\t\t}\n\t}\n}\n\nFetchMock.prototype.addRoute = function (route) {\n\n\tif (!route) {\n\t\tthrow new Error('.mock() must be passed configuration for a route')\n\t}\n\n\t// Allows selective application of some of the preregistered routes\n\tthis.routes.push(compileRoute(route, FetchMock.Request));\n}\n\n\nFetchMock.prototype.mockResponse = function (url, responseConfig, fetchOpts) {\n\tconst Promise = this.Promise || FetchMock.Promise;\n\n\t// It seems odd to call this in here even though it's already called within fetchMock\n\t// It's to handle the fact that because we want to support making it very easy to add a\n\t// delay to any sort of response (including responses which are defined with a function)\n\t// while also allowing function responses to return a Promise for a response config.\n\tif (typeof responseConfig === 'function') {\n\t\tresponseConfig = responseConfig(url, fetchOpts);\n\t}\n\n\tif (FetchMock.Response.prototype.isPrototypeOf(responseConfig)) {\n\t\treturn Promise.resolve(responseConfig);\n\t}\n\n\tif (responseConfig.throws) {\n\t\treturn Promise.reject(responseConfig.throws);\n\t}\n\n\tif (typeof responseConfig === 'number') {\n\t\tresponseConfig = {\n\t\t\tstatus: responseConfig\n\t\t};\n\t} else if (typeof responseConfig === 'string' || !(responseConfig.body || responseConfig.headers || responseConfig.throws || responseConfig.status)) {\n\t\tresponseConfig = {\n\t\t\tbody: responseConfig\n\t\t};\n\t}\n\n\tconst opts = responseConfig.opts || {};\n\topts.url = url;\n\topts.sendAsJson = responseConfig.sendAsJson === undefined ? FetchMock.config.sendAsJson : responseConfig.sendAsJson;\n\tif (responseConfig.status && (typeof responseConfig.status !== 'number' || parseInt(responseConfig.status, 10) !== responseConfig.status || responseConfig.status < 200 || responseConfig.status > 599)) {\n\t\tthrow new TypeError(`Invalid status ${responseConfig.status} passed on response object.\nTo respond with a JSON object that has status as a property assign the object to body\ne.g. {\"body\": {\"status: \"registered\"}}`);\n\t}\n\topts.status = responseConfig.status || 200;\n\topts.statusText = FetchMock.statusTextMap['' + opts.status];\n\t// The ternary operator is to cope with new Headers(undefined) throwing in Chrome\n\t// https://code.google.com/p/chromium/issues/detail?id=335871\n\topts.headers = responseConfig.headers ? new FetchMock.Headers(responseConfig.headers) : new FetchMock.Headers();\n\n\tlet body = responseConfig.body;\n\tif (opts.sendAsJson && responseConfig.body != null && typeof body === 'object') { //eslint-disable-line\n\t\tbody = JSON.stringify(body);\n\t}\n\n\tif (FetchMock.stream) {\n\t\tlet s = new FetchMock.stream.Readable();\n\t\tif (body != null) { //eslint-disable-line\n\t\t\ts.push(body, 'utf-8');\n\t\t}\n\t\ts.push(null);\n\t\tbody = s;\n\t}\n\n\treturn Promise.resolve(new FetchMock.Response(body, opts));\n}\n\nFetchMock.prototype.push = function (name, call) {\n\tif (name) {\n\t\tthis._calls[name] = this._calls[name] || [];\n\t\tthis._calls[name].push(call);\n\t\tthis._matchedCalls.push(call);\n\t} else {\n\t\tthis._unmatchedCalls.push(call);\n\t}\n}\n\nFetchMock.prototype.restore = function () {\n\tthis._unMock();\n\tthis.reset();\n\tthis.routes = [];\n\treturn this;\n}\n\nFetchMock.prototype.reset = function () {\n\tthis._calls = {};\n\tthis._matchedCalls = [];\n\tthis._unmatchedCalls = [];\n\tthis.routes.forEach(route => route.reset && route.reset())\n\treturn this;\n}\n\nFetchMock.prototype.calls = function (name) {\n\treturn name ? (this._calls[name] || []) : {\n\t\tmatched: this._matchedCalls,\n\t\tunmatched: this._unmatchedCalls\n\t};\n}\n\nFetchMock.prototype.lastCall = function (name) {\n\tconst calls = name ? this.calls(name) : this.calls().matched;\n\tif (calls && calls.length) {\n\t\treturn calls[calls.length - 1];\n\t} else {\n\t\treturn undefined;\n\t}\n}\n\nFetchMock.prototype.lastUrl = function (name) {\n\tconst call = this.lastCall(name);\n\treturn call && call[0];\n}\n\nFetchMock.prototype.lastOptions = function (name) {\n\tconst call = this.lastCall(name);\n\treturn call && call[1];\n}\n\nFetchMock.prototype.called = function (name) {\n\tif (!name) {\n\t\treturn !!(this._matchedCalls.length || this._unmatchedCalls.length);\n\t}\n\treturn !!(this._calls[name] && this._calls[name].length);\n}\n\nFetchMock.prototype.done = function (name) {\n\tconst names = name ? [name] : this.routes.map(r => r.name);\n\t// Can't use array.every because\n\t// a) not widely supported\n\t// b) would exit after first failure, which would break the logging\n\treturn names.map(name => {\n\t\tif (!this.called(name)) {\n\t\t\tconsole.warn(`Warning: ${name} not called`);\n\t\t\treturn false;\n\t\t}\n\t\t// would use array.find... but again not so widely supported\n\t\tconst expectedTimes = (this.routes.filter(r => r.name === name) || [{}])[0].times;\n\n\t\tif (!expectedTimes) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst actualTimes = this.calls(name).length;\n\t\tif (expectedTimes > actualTimes) {\n\t\t\tconsole.warn(`Warning: ${name} only called ${actualTimes} times, but ${expectedTimes} expected`);\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t})\n\t\t.filter(bool => !bool).length === 0\n}\n\nFetchMock.config = {\n\tsendAsJson: true\n}\n\nFetchMock.prototype.configure = function (opts) {\n\tObject.assign(FetchMock.config, opts);\n}\n\nFetchMock.setImplementations = FetchMock.prototype.setImplementations = function (implementations) {\n\tFetchMock.Headers = implementations.Headers || FetchMock.Headers;\n\tFetchMock.Request = implementations.Request || FetchMock.Request;\n\tFetchMock.Response = implementations.Response || FetchMock.Response;\n\tFetchMock.Promise = implementations.Promise || FetchMock.Promise;\n}\n\nFetchMock.prototype.sandbox = function (Promise) {\n\tif (this.routes.length || this.fallbackResponse) {\n\t\tthrow new Error('.sandbox() can only be called on fetch-mock instances that don\\'t have routes configured already')\n\t}\n\tconst instance = new FetchMock();\n\n\t// this construct allows us to create a fetch-mock instance which is also\n\t// a callable function, while circumventing circularity when defining the\n\t// object that this function should be bound to\n\tlet boundMock;\n\tconst proxy = function () {\n\t\treturn boundMock.apply(null, arguments);\n\t}\n\n\tconst functionInstance = Object.assign(\n\t\tproxy, // Ensures that the entire returned object is a callable function\n\t\tFetchMock.prototype, // all prototype methods\n\t\tinstance // instance data\n\t);\n\tfunctionInstance.bindMethods();\n\tboundMock = functionInstance.fetchMock;\n\tfunctionInstance.isSandbox = true;\n\tif (Promise) {\n\t\tfunctionInstance.Promise = Promise;\n\t}\n\n\treturn functionInstance;\n};\n\n['get','post','put','delete','head', 'patch']\n\t.forEach(method => {\n\t\tFetchMock.prototype[method] = function (matcher, response, options) {\n\t\t\treturn this.mock(matcher, response, Object.assign({}, options, {method: method.toUpperCase()}));\n\t\t}\n\t\tFetchMock.prototype[`${method}Once`] = function (matcher, response, options) {\n\t\t\treturn this.once(matcher, response, Object.assign({}, options, {method: method.toUpperCase()}));\n\t\t}\n\t})\n\nmodule.exports = FetchMock;","/home/travis/build/npmtest/node-npmtest-fetch-mock/node_modules/fetch-mock/src/compile-route.js":"'use strict';\nconst glob = require('glob-to-regexp')\nconst express = require('path-to-regexp');\n\nconst stringMatchers = {\n\tbegin: targetString => {\n\t\treturn url => url.indexOf(targetString) === 0\n\t},\n\tend: targetString => {\n\t\treturn url => url.substr(-targetString.length) === targetString\n\t},\n\tglob: targetString => {\n\t\tconst urlRX = glob(targetString.replace(/^glob:/, ''))\n\t\treturn url => urlRX.test(url)\n\t},\n\texpress: targetString => {\n\t\tconst urlRX = express(targetString.replace(/^express:/, ''))\n\t\treturn url => urlRX.test(url)\n\t}\n}\n\nfunction getHeaderMatcher (expectedHeaders) {\n\tconst expectation = Object.keys(expectedHeaders).map(k => {\n\t\treturn {key: k.toLowerCase(), val: expectedHeaders[k]}\n\t})\n\treturn headers => {\n\t\tif (!headers) {\n\t\t\theaders = {};\n\t\t}\n\t\tconst lowerCaseHeaders = Object.keys(headers).reduce((obj, k) => {\n\t\t\tobj[k.toLowerCase()] = headers[k]\n\t\t\treturn obj;\n\t\t}, {});\n\t\treturn expectation.every(header => {\n\t\t\treturn lowerCaseHeaders[header.key] === header.val;\n\t\t})\n\t}\n}\n\nfunction normalizeRequest (url, options, Request) {\n\tif (Request.prototype.isPrototypeOf(url)) {\n\t\treturn {\n\t\t\turl: url.url,\n\t\t\tmethod: url.method,\n\t\t\theaders: (() => {\n\t\t\t\tconst headers = {};\n\t\t\t\turl.headers.forEach(name => headers[name] = url.headers.name);\n\t\t\t\treturn headers;\n\t\t\t})()\n\t\t};\n\t} else {\n\t\treturn {\n\t\t\turl: url,\n\t\t\tmethod: options && options.method || 'GET',\n\t\t\theaders: options && options.headers\n\t\t};\n\t}\n}\n\nmodule.exports = function (route, Request) {\n\troute = Object.assign({}, route);\n\n\tif (typeof route.response === 'undefined') {\n\t\tthrow new Error('Each route must define a response');\n\t}\n\n\tif (!route.matcher) {\n\t\tthrow new Error('each route must specify a string, regex or function to match calls to fetch');\n\t}\n\n\tif (!route.name) {\n\t\troute.name = route.matcher.toString();\n\t\troute.__unnamed = true;\n\t}\n\n\t// If user has provided a function as a matcher we assume they are handling all the\n\t// matching logic they need\n\tif (typeof route.matcher === 'function') {\n\t\treturn route;\n\t}\n\n\tconst expectedMethod = route.method && route.method.toLowerCase();\n\n\tfunction matchMethod (method) {\n\t\treturn !expectedMethod || expectedMethod === (method ? method.toLowerCase() : 'get');\n\t};\n\n\tconst matchHeaders = route.headers ? getHeaderMatcher(route.headers) : (() => true);\n\n\tlet matchUrl;\n\n\tif (typeof route.matcher === 'string') {\n\n\t\tObject.keys(stringMatchers).some(name => {\n\t\t\tif (route.matcher.indexOf(name + ':') === 0) {\n\t\t\t\tconst url = route.matcher.replace(new RegExp(`^${name}:`), '')\n\t\t\t\tmatchUrl = stringMatchers[name](url);\n\t\t\t\treturn true\n\t\t\t}\n\t\t})\n\t\tif (!matchUrl) {\n\t\t\tif (route.matcher === '*') {\n\t\t\t\tmatchUrl = () => true;\n\t\t\t} else if (route.matcher.indexOf('^') === 0) {\n\t\t\t\tconsole.warn('Using \\'^\\' to denote the start of a url is deprecated. Use \\'begin:\\' instead');\n\t\t\t\tconst expectedUrl = route.matcher.substr(1);\n\t\t\t\tmatchUrl = url => url.indexOf(expectedUrl) === 0;\n\t\t\t} else {\n\t\t\t\tconst expectedUrl = route.matcher;\n\t\t\t\tmatchUrl = url => url === expectedUrl;\n\t\t\t}\n\t\t}\n\t} else if (route.matcher instanceof RegExp) {\n\t\tconst urlRX = route.matcher;\n\t\tmatchUrl = function (url) {\n\t\t\treturn urlRX.test(url);\n\t\t};\n\t}\n\n\tconst matcher = (url, options) => {\n\t\tconst req = normalizeRequest(url, options, Request);\n\t\treturn matchHeaders(req.headers) && matchMethod(req.method) && matchUrl(req.url);\n\t};\n\n\tif (route.times) {\n\t\tlet timesLeft = route.times;\n\t\troute.matcher = (url, options) => {\n\t\t\tconst match = timesLeft && matcher(url, options);\n\t\t\tif (match) {\n\t\t\t\ttimesLeft--;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\troute.reset = () => timesLeft = route.times;\n\t} else {\n\t\troute.matcher = matcher;\n\t}\n\n\treturn route;\n}\n","/home/travis/build/npmtest/node-npmtest-fetch-mock/node_modules/fetch-mock/es5/client-browserified.js":"(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.fetchMock = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar FetchMock = require('./fetch-mock');\nvar statusTextMap = require('./status-text');\nvar theGlobal = typeof window !== 'undefined' ? window : self;\n\nFetchMock.global = theGlobal;\nFetchMock.statusTextMap = statusTextMap;\n\nFetchMock.setImplementations({\n\tPromise: theGlobal.Promise,\n\tRequest: theGlobal.Request,\n\tResponse: theGlobal.Response,\n\tHeaders: theGlobal.Headers\n});\n\nmodule.exports = new FetchMock();\n},{\"./fetch-mock\":3,\"./status-text\":4}],2:[function(require,module,exports){\n'use strict';\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _glob = require('glob-to-regexp');\nvar _express = require('path-to-regexp');\n\nvar stringMatchers = {\n\tbegin: function begin(targetString) {\n\t\treturn function (url) {\n\t\t\treturn url.indexOf(targetString) === 0;\n\t\t};\n\t},\n\tend: function end(targetString) {\n\t\treturn function (url) {\n\t\t\treturn url.substr(-targetString.length) === targetString;\n\t\t};\n\t},\n\tglob: function glob(targetString) {\n\t\tvar urlRX = _glob(targetString.replace(/^glob:/, ''));\n\t\treturn function (url) {\n\t\t\treturn urlRX.test(url);\n\t\t};\n\t},\n\texpress: function express(targetString) {\n\t\tvar urlRX = _express(targetString.replace(/^express:/, ''));\n\t\treturn function (url) {\n\t\t\treturn urlRX.test(url);\n\t\t};\n\t}\n};\n\nfunction getHeaderMatcher(expectedHeaders) {\n\tvar expectation = Object.keys(expectedHeaders).map(function (k) {\n\t\treturn { key: k.toLowerCase(), val: expectedHeaders[k] };\n\t});\n\treturn function (headers) {\n\t\tif (!headers) {\n\t\t\theaders = {};\n\t\t}\n\t\tvar lowerCaseHeaders = Object.keys(headers).reduce(function (obj, k) {\n\t\t\tobj[k.toLowerCase()] = headers[k];\n\t\t\treturn obj;\n\t\t}, {});\n\t\treturn expectation.every(function (header) {\n\t\t\treturn lowerCaseHeaders[header.key] === header.val;\n\t\t});\n\t};\n}\n\nfunction normalizeRequest(url, options, Request) {\n\tif (Request.prototype.isPrototypeOf(url)) {\n\t\treturn {\n\t\t\turl: url.url,\n\t\t\tmethod: url.method,\n\t\t\theaders: function () {\n\t\t\t\tvar headers = {};\n\t\t\t\turl.headers.forEach(function (name) {\n\t\t\t\t\treturn headers[name] = url.headers.name;\n\t\t\t\t});\n\t\t\t\treturn headers;\n\t\t\t}()\n\t\t};\n\t} else {\n\t\treturn {\n\t\t\turl: url,\n\t\t\tmethod: options && options.method || 'GET',\n\t\t\theaders: options && options.headers\n\t\t};\n\t}\n}\n\nmodule.exports = function (route, Request) {\n\troute = _extends({}, route);\n\n\tif (typeof route.response === 'undefined') {\n\t\tthrow new Error('Each route must define a response');\n\t}\n\n\tif (!route.matcher) {\n\t\tthrow new Error('each route must specify a string, regex or function to match calls to fetch');\n\t}\n\n\tif (!route.name) {\n\t\troute.name = route.matcher.toString();\n\t\troute.__unnamed = true;\n\t}\n\n\t// If user has provided a function as a matcher we assume they are handling all the\n\t// matching logic they need\n\tif (typeof route.matcher === 'function') {\n\t\treturn route;\n\t}\n\n\tvar expectedMethod = route.method && route.method.toLowerCase();\n\n\tfunction matchMethod(method) {\n\t\treturn !expectedMethod || expectedMethod === (method ? method.toLowerCase() : 'get');\n\t};\n\n\tvar matchHeaders = route.headers ? getHeaderMatcher(route.headers) : function () {\n\t\treturn true;\n\t};\n\n\tvar matchUrl = void 0;\n\n\tif (typeof route.matcher === 'string') {\n\n\t\tObject.keys(stringMatchers).some(function (name) {\n\t\t\tif (route.matcher.indexOf(name + ':') === 0) {\n\t\t\t\tvar url = route.matcher.replace(new RegExp('^' + name + ':'), '');\n\t\t\t\tmatchUrl = stringMatchers[name](url);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\tif (!matchUrl) {\n\t\t\tif (route.matcher === '*') {\n\t\t\t\tmatchUrl = function matchUrl() {\n\t\t\t\t\treturn true;\n\t\t\t\t};\n\t\t\t} else if (route.matcher.indexOf('^') === 0) {\n\t\t\t\t(function () {\n\t\t\t\t\tconsole.warn('Using \\'^\\' to denote the start of a url is deprecated. Use \\'begin:\\' instead');\n\t\t\t\t\tvar expectedUrl = route.matcher.substr(1);\n\t\t\t\t\tmatchUrl = function matchUrl(url) {\n\t\t\t\t\t\treturn url.indexOf(expectedUrl) === 0;\n\t\t\t\t\t};\n\t\t\t\t})();\n\t\t\t} else {\n\t\t\t\t(function () {\n\t\t\t\t\tvar expectedUrl = route.matcher;\n\t\t\t\t\tmatchUrl = function matchUrl(url) {\n\t\t\t\t\t\treturn url === expectedUrl;\n\t\t\t\t\t};\n\t\t\t\t})();\n\t\t\t}\n\t\t}\n\t} else if (route.matcher instanceof RegExp) {\n\t\t(function () {\n\t\t\tvar urlRX = route.matcher;\n\t\t\tmatchUrl = function matchUrl(url) {\n\t\t\t\treturn urlRX.test(url);\n\t\t\t};\n\t\t})();\n\t}\n\n\tvar matcher = function matcher(url, options) {\n\t\tvar req = normalizeRequest(url, options, Request);\n\t\treturn matchHeaders(req.headers) && matchMethod(req.method) && matchUrl(req.url);\n\t};\n\n\tif (route.times) {\n\t\t(function () {\n\t\t\tvar timesLeft = route.times;\n\t\t\troute.matcher = function (url, options) {\n\t\t\t\tvar match = timesLeft && matcher(url, options);\n\t\t\t\tif (match) {\n\t\t\t\t\ttimesLeft--;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t};\n\t\t\troute.reset = function () {\n\t\t\t\treturn timesLeft = route.times;\n\t\t\t};\n\t\t})();\n\t} else {\n\t\troute.matcher = matcher;\n\t}\n\n\treturn route;\n};\n},{\"glob-to-regexp\":5,\"path-to-regexp\":6}],3:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar compileRoute = require('./compile-route');\n\nvar FetchMock = function FetchMock() {\n\n\tthis.routes = [];\n\tthis._calls = {};\n\tthis._matchedCalls = [];\n\tthis._unmatchedCalls = [];\n\tthis.bindMethods();\n};\n\nFetchMock.prototype.bindMethods = function () {\n\tthis.fetchMock = FetchMock.prototype.fetchMock.bind(this);\n\tthis.restore = FetchMock.prototype.restore.bind(this);\n\tthis.reset = FetchMock.prototype.reset.bind(this);\n};\n\nFetchMock.prototype.mock = function (matcher, response, options) {\n\n\tvar route = void 0;\n\n\t// Handle the variety of parameters accepted by mock (see README)\n\tif (matcher && response && options) {\n\t\troute = _extends({\n\t\t\tmatcher: matcher,\n\t\t\tresponse: response\n\t\t}, options);\n\t} else if (matcher && response) {\n\t\troute = {\n\t\t\tmatcher: matcher,\n\t\t\tresponse: response\n\t\t};\n\t} else if (matcher && matcher.matcher) {\n\t\troute = matcher;\n\t} else {\n\t\tthrow new Error('Invalid parameters passed to fetch-mock');\n\t}\n\n\tthis.addRoute(route);\n\n\treturn this._mock();\n};\n\nFetchMock.prototype.once = function (matcher, response, options) {\n\treturn this.mock(matcher, response, _extends({}, options, { times: 1 }));\n};\n\nFetchMock.prototype._mock = function () {\n\tif (!this.isSandbox) {\n\t\t// Do this here rather than in the constructor to ensure it's scoped to the test\n\t\tthis.realFetch = this.realFetch || FetchMock.global.fetch;\n\t\tFetchMock.global.fetch = this.fetchMock;\n\t}\n\treturn this;\n};\n\nFetchMock.prototype._unMock = function () {\n\tif (this.realFetch) {\n\t\tFetchMock.global.fetch = this.realFetch;\n\t\tthis.realFetch = null;\n\t}\n\tthis.fallbackResponse = null;\n\treturn this;\n};\n\nFetchMock.prototype.catch = function (response) {\n\tif (this.fallbackResponse) {\n\t\tconsole.warn('calling fetchMock.catch() twice - are you sure you want to overwrite the previous fallback response');\n\t}\n\tthis.fallbackResponse = response || 'ok';\n\treturn this._mock();\n};\n\nFetchMock.prototype.spy = function () {\n\tthis._mock();\n\treturn this.catch(this.realFetch);\n};\n\nFetchMock.prototype.fetchMock = function (url, opts) {\n\tvar _this = this;\n\n\tvar Promise = this.Promise || FetchMock.Promise;\n\tvar response = this.router(url, opts);\n\n\tif (!response) {\n\t\tconsole.warn('Unmatched ' + (opts && opts.method || 'GET') + ' to ' + url);\n\t\tthis.push(null, [url, opts]);\n\n\t\tif (this.fallbackResponse) {\n\t\t\tresponse = this.fallbackResponse;\n\t\t} else {\n\t\t\tthrow new Error('No fallback response defined for ' + (opts && opts.method || 'GET') + ' to ' + url);\n\t\t}\n\t}\n\n\tif (typeof response === 'function') {\n\t\tresponse = response(url, opts);\n\t}\n\n\tif (typeof response.then === 'function') {\n\t\tvar responsePromise = response.then(function (response) {\n\t\t\treturn _this.mockResponse(url, response, opts);\n\t\t});\n\t\treturn Promise.resolve(responsePromise); // Ensure Promise is always our implementation.\n\t} else {\n\t\treturn this.mockResponse(url, response, opts);\n\t}\n};\n\nFetchMock.prototype.router = function (url, opts) {\n\tvar route = void 0;\n\tfor (var i = 0, il = this.routes.length; i < il; i++) {\n\t\troute = this.routes[i];\n\t\tif (route.matcher(url, opts)) {\n\t\t\tthis.push(route.name, [url, opts]);\n\t\t\treturn route.response;\n\t\t}\n\t}\n};\n\nFetchMock.prototype.addRoute = function (route) {\n\n\tif (!route) {\n\t\tthrow new Error('.mock() must be passed configuration for a route');\n\t}\n\n\t// Allows selective application of some of the preregistered routes\n\tthis.routes.push(compileRoute(route, FetchMock.Request));\n};\n\nFetchMock.prototype.mockResponse = function (url, responseConfig, fetchOpts) {\n\tvar Promise = this.Promise || FetchMock.Promise;\n\n\t// It seems odd to call this in here even though it's already called within fetchMock\n\t// It's to handle the fact that because we want to support making it very easy to add a\n\t// delay to any sort of response (including responses which are defined with a function)\n\t// while also allowing function responses to return a Promise for a response config.\n\tif (typeof responseConfig === 'function') {\n\t\tresponseConfig = responseConfig(url, fetchOpts);\n\t}\n\n\tif (FetchMock.Response.prototype.isPrototypeOf(responseConfig)) {\n\t\treturn Promise.resolve(responseConfig);\n\t}\n\n\tif (responseConfig.throws) {\n\t\treturn Promise.reject(responseConfig.throws);\n\t}\n\n\tif (typeof responseConfig === 'number') {\n\t\tresponseConfig = {\n\t\t\tstatus: responseConfig\n\t\t};\n\t} else if (typeof responseConfig === 'string' || !(responseConfig.body || responseConfig.headers || responseConfig.throws || responseConfig.status)) {\n\t\tresponseConfig = {\n\t\t\tbody: responseConfig\n\t\t};\n\t}\n\n\tvar opts = responseConfig.opts || {};\n\topts.url = url;\n\topts.sendAsJson = responseConfig.sendAsJson === undefined ? FetchMock.config.sendAsJson : responseConfig.sendAsJson;\n\tif (responseConfig.status && (typeof responseConfig.status !== 'number' || parseInt(responseConfig.status, 10) !== responseConfig.status || responseConfig.status < 200 || responseConfig.status > 599)) {\n\t\tthrow new TypeError('Invalid status ' + responseConfig.status + ' passed on response object.\\nTo respond with a JSON object that has status as a property assign the object to body\\ne.g. {\"body\": {\"status: \"registered\"}}');\n\t}\n\topts.status = responseConfig.status || 200;\n\topts.statusText = FetchMock.statusTextMap['' + opts.status];\n\t// The ternary operator is to cope with new Headers(undefined) throwing in Chrome\n\t// https://code.google.com/p/chromium/issues/detail?id=335871\n\topts.headers = responseConfig.headers ? new FetchMock.Headers(responseConfig.headers) : new FetchMock.Headers();\n\n\tvar body = responseConfig.body;\n\tif (opts.sendAsJson && responseConfig.body != null && (typeof body === 'undefined' ? 'undefined' : _typeof(body)) === 'object') {\n\t\t//eslint-disable-line\n\t\tbody = JSON.stringify(body);\n\t}\n\n\tif (FetchMock.stream) {\n\t\tvar s = new FetchMock.stream.Readable();\n\t\tif (body != null) {\n\t\t\t//eslint-disable-line\n\t\t\ts.push(body, 'utf-8');\n\t\t}\n\t\ts.push(null);\n\t\tbody = s;\n\t}\n\n\treturn Promise.resolve(new FetchMock.Response(body, opts));\n};\n\nFetchMock.prototype.push = function (name, call) {\n\tif (name) {\n\t\tthis._calls[name] = this._calls[name] || [];\n\t\tthis._calls[name].push(call);\n\t\tthis._matchedCalls.push(call);\n\t} else {\n\t\tthis._unmatchedCalls.push(call);\n\t}\n};\n\nFetchMock.prototype.restore = function () {\n\tthis._unMock();\n\tthis.reset();\n\tthis.routes = [];\n\treturn this;\n};\n\nFetchMock.prototype.reset = function () {\n\tthis._calls = {};\n\tthis._matchedCalls = [];\n\tthis._unmatchedCalls = [];\n\tthis.routes.forEach(function (route) {\n\t\treturn route.reset && route.reset();\n\t});\n\treturn this;\n};\n\nFetchMock.prototype.calls = function (name) {\n\treturn name ? this._calls[name] || [] : {\n\t\tmatched: this._matchedCalls,\n\t\tunmatched: this._unmatchedCalls\n\t};\n};\n\nFetchMock.prototype.lastCall = function (name) {\n\tvar calls = name ? this.calls(name) : this.calls().matched;\n\tif (calls && calls.length) {\n\t\treturn calls[calls.length - 1];\n\t} else {\n\t\treturn undefined;\n\t}\n};\n\nFetchMock.prototype.lastUrl = function (name) {\n\tvar call = this.lastCall(name);\n\treturn call && call[0];\n};\n\nFetchMock.prototype.lastOptions = function (name) {\n\tvar call = this.lastCall(name);\n\treturn call && call[1];\n};\n\nFetchMock.prototype.called = function (name) {\n\tif (!name) {\n\t\treturn !!(this._matchedCalls.length || this._unmatchedCalls.length);\n\t}\n\treturn !!(this._calls[name] && this._calls[name].length);\n};\n\nFetchMock.prototype.done = function (name) {\n\tvar _this2 = this;\n\n\tvar names = name ? [name] : this.routes.map(function (r) {\n\t\treturn r.name;\n\t});\n\t// Can't use array.every because\n\t// a) not widely supported\n\t// b) would exit after first failure, which would break the logging\n\treturn names.map(function (name) {\n\t\tif (!_this2.called(name)) {\n\t\t\tconsole.warn('Warning: ' + name + ' not called');\n\t\t\treturn false;\n\t\t}\n\t\t// would use array.find... but again not so widely supported\n\t\tvar expectedTimes = (_this2.routes.filter(function (r) {\n\t\t\treturn r.name === name;\n\t\t}) || [{}])[0].times;\n\n\t\tif (!expectedTimes) {\n\t\t\treturn true;\n\t\t}\n\n\t\tvar actualTimes = _this2.calls(name).length;\n\t\tif (expectedTimes > actualTimes) {\n\t\t\tconsole.warn('Warning: ' + name + ' only called ' + actualTimes + ' times, but ' + expectedTimes + ' expected');\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}).filter(function (bool) {\n\t\treturn !bool;\n\t}).length === 0;\n};\n\nFetchMock.config = {\n\tsendAsJson: true\n};\n\nFetchMock.prototype.configure = function (opts) {\n\t_extends(FetchMock.config, opts);\n};\n\nFetchMock.setImplementations = FetchMock.prototype.setImplementations = function (implementations) {\n\tFetchMock.Headers = implementations.Headers || FetchMock.Headers;\n\tFetchMock.Request = implementations.Request || FetchMock.Request;\n\tFetchMock.Response = implementations.Response || FetchMock.Response;\n\tFetchMock.Promise = implementations.Promise || FetchMock.Promise;\n};\n\nFetchMock.prototype.sandbox = function (Promise) {\n\tif (this.routes.length || this.fallbackResponse) {\n\t\tthrow new Error('.sandbox() can only be called on fetch-mock instances that don\\'t have routes configured already');\n\t}\n\tvar instance = new FetchMock();\n\n\t// this construct allows us to create a fetch-mock instance which is also\n\t// a callable function, while circumventing circularity when defining the\n\t// object that this function should be bound to\n\tvar boundMock = void 0;\n\tvar proxy = function proxy() {\n\t\treturn boundMock.apply(null, arguments);\n\t};\n\n\tvar functionInstance = _extends(proxy, // Ensures that the entire returned object is a callable function\n\tFetchMock.prototype, // all prototype methods\n\tinstance // instance data\n\t);\n\tfunctionInstance.bindMethods();\n\tboundMock = functionInstance.fetchMock;\n\tfunctionInstance.isSandbox = true;\n\tif (Promise) {\n\t\tfunctionInstance.Promise = Promise;\n\t}\n\n\treturn functionInstance;\n};\n\n['get', 'post', 'put', 'delete', 'head', 'patch'].forEach(function (method) {\n\tFetchMock.prototype[method] = function (matcher, response, options) {\n\t\treturn this.mock(matcher, response, _extends({}, options, { method: method.toUpperCase() }));\n\t};\n\tFetchMock.prototype[method + 'Once'] = function (matcher, response, options) {\n\t\treturn this.once(matcher, response, _extends({}, options, { method: method.toUpperCase() }));\n\t};\n});\n\nmodule.exports = FetchMock;\n},{\"./compile-route\":2}],4:[function(require,module,exports){\n'use strict';\n\nvar statusTextMap = {\n  '100': 'Continue',\n  '101': 'Switching Protocols',\n  '102': 'Processing',\n  '200': 'OK',\n  '201': 'Created',\n  '202': 'Accepted',\n  '203': 'Non-Authoritative Information',\n  '204': 'No Content',\n  '205': 'Reset Content',\n  '206': 'Partial Content',\n  '207': 'Multi-Status',\n  '208': 'Already Reported',\n  '226': 'IM Used',\n  '300': 'Multiple Choices',\n  '301': 'Moved Permanently',\n  '302': 'Found',\n  '303': 'See Other',\n  '304': 'Not Modified',\n  '305': 'Use Proxy',\n  '307': 'Temporary Redirect',\n  '308': 'Permanent Redirect',\n  '400': 'Bad Request',\n  '401': 'Unauthorized',\n  '402': 'Payment Required',\n  '403': 'Forbidden',\n  '404': 'Not Found',\n  '405': 'Method Not Allowed',\n  '406': 'Not Acceptable',\n  '407': 'Proxy Authentication Required',\n  '408': 'Request Timeout',\n  '409': 'Conflict',\n  '410': 'Gone',\n  '411': 'Length Required',\n  '412': 'Precondition Failed',\n  '413': 'Payload Too Large',\n  '414': 'URI Too Long',\n  '415': 'Unsupported Media Type',\n  '416': 'Range Not Satisfiable',\n  '417': 'Expectation Failed',\n  '418': 'I\\'m a teapot',\n  '421': 'Misdirected Request',\n  '422': 'Unprocessable Entity',\n  '423': 'Locked',\n  '424': 'Failed Dependency',\n  '425': 'Unordered Collection',\n  '426': 'Upgrade Required',\n  '428': 'Precondition Required',\n  '429': 'Too Many Requests',\n  '431': 'Request Header Fields Too Large',\n  '451': 'Unavailable For Legal Reasons',\n  '500': 'Internal Server Error',\n  '501': 'Not Implemented',\n  '502': 'Bad Gateway',\n  '503': 'Service Unavailable',\n  '504': 'Gateway Timeout',\n  '505': 'HTTP Version Not Supported',\n  '506': 'Variant Also Negotiates',\n  '507': 'Insufficient Storage',\n  '508': 'Loop Detected',\n  '509': 'Bandwidth Limit Exceeded',\n  '510': 'Not Extended',\n  '511': 'Network Authentication Required'\n};\n\nmodule.exports = statusTextMap;\n},{}],5:[function(require,module,exports){\nmodule.exports = function (glob, opts) {\n  if (typeof glob !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  var str = String(glob);\n\n  // The regexp we are building, as a string.\n  var reStr = \"\";\n\n  // Whether we are matching so called \"extended\" globs (like bash) and should\n  // support single character matching, matching ranges of characters, group\n  // matching, etc.\n  var extended = opts ? !!opts.extended : false;\n\n  // When globstar is _false_ (default), '/foo/*' is translated a regexp like\n  // '^\\/foo\\/.*$' which will match any string beginning with '/foo/'\n  // When globstar is _true_, '/foo/*' is translated to regexp like\n  // '^\\/foo\\/[^/]*$' which will match any string beginning with '/foo/' BUT\n  // which does not have a '/' to the right of it.\n  // E.g. with '/foo/*' these will match: '/foo/bar', '/foo/bar.txt' but\n  // these will not '/foo/bar/baz', '/foo/bar/baz.txt'\n  // Lastely, when globstar is _true_, '/foo/**' is equivelant to '/foo/*' when\n  // globstar is _false_\n  var globstar = opts ? !!opts.globstar : false;\n\n  // If we are doing extended matching, this boolean is true when we are inside\n  // a group (eg {*.html,*.js}), and false otherwise.\n  var inGroup = false;\n\n  // RegExp flags (eg \"i\" ) to pass in to RegExp constructor.\n  var flags = opts && typeof( opts.flags ) === \"string\" ? opts.flags : \"\";\n\n  var c;\n  for (var i = 0, len = str.length; i < len; i++) {\n    c = str[i];\n\n    switch (c) {\n    case \"\\\\\":\n    case \"/\":\n    case \"$\":\n    case \"^\":\n    case \"+\":\n    case \".\":\n    case \"(\":\n    case \")\":\n    case \"=\":\n    case \"!\":\n    case \"|\":\n      reStr += \"\\\\\" + c;\n      break;\n\n    case \"?\":\n      if (extended) {\n        reStr += \".\";\n\t    break;\n      }\n\n    case \"[\":\n    case \"]\":\n      if (extended) {\n        reStr += c;\n\t    break;\n      }\n\n    case \"{\":\n      if (extended) {\n        inGroup = true;\n\t    reStr += \"(\";\n\t    break;\n      }\n\n    case \"}\":\n      if (extended) {\n        inGroup = false;\n\t    reStr += \")\";\n\t    break;\n      }\n\n    case \",\":\n      if (inGroup) {\n        reStr += \"|\";\n\t    break;\n      }\n      reStr += \"\\\\\" + c;\n      break;\n\n    case \"*\":\n      // Move over all consecutive \"*\"'s.\n      // Also store the previous and next characters\n      var prevChar = str[i - 1];\n      var starCount = 1;\n      while(str[i + 1] === \"*\") {\n        starCount++;\n        i++;\n      }\n      var nextChar = str[i + 1];\n\n      if (!globstar) {\n        // globstar is disabled, so treat any number of \"*\" as one\n        reStr += \".*\";\n      } else {\n        // globstar is enabled, so determine if this is a globstar segment\n        var isGlobstar = starCount > 1                      // multiple \"*\"'s\n          && (prevChar === \"/\" || prevChar === undefined)   // from the start of the segment\n          && (nextChar === \"/\" || nextChar === undefined)   // to the end of the segment\n\n        if (isGlobstar) {\n          // it's a globstar, so match zero or more path segments\n          reStr += \"(?:[^/]*(?:\\/|$))*\";\n          i++; // move over the \"/\"\n        } else {\n          // it's not a globstar, so only match one path segment\n          reStr += \"[^/]*\";\n        }\n      }\n      break;\n\n    default:\n      reStr += c;\n    }\n  }\n\n  // When regexp 'g' flag is specified don't\n  // constrain the regular expression with ^ & $\n  if (!flags || !~flags.indexOf('g')) {\n    reStr = \"^\" + reStr + \"$\";\n  }\n\n  return new RegExp(reStr, flags);\n};\n\n},{}],6:[function(require,module,exports){\nvar isarray = require('isarray')\n\n/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = options && options.delimiter || '/'\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      continue\n    }\n\n    var next = str[index]\n    var prefix = res[2]\n    var name = res[3]\n    var capture = res[4]\n    var group = res[5]\n    var modifier = res[6]\n    var asterisk = res[7]\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n    }\n\n    var partial = prefix != null && next != null && next !== prefix\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = res[2] || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    })\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index)\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path)\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (obj, opts) {\n    var path = ''\n    var data = obj || {}\n    var options = opts || {}\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n\n        continue\n      }\n\n      var value = data[token.name]\n      var segment\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value)\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      })\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var route = ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = '(?:' + token.pattern + ')'\n\n      keys.push(token)\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*'\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?'\n        } else {\n          capture = prefix + '(' + capture + ')?'\n        }\n      } else {\n        capture = prefix + '(' + capture + ')'\n      }\n\n      route += capture\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/')\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'\n  }\n\n  if (end) {\n    route += '$'\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n\n},{\"isarray\":7}],7:[function(require,module,exports){\nmodule.exports = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n\n},{}]},{},[1])(1)\n});","/home/travis/build/npmtest/node-npmtest-fetch-mock/node_modules/fetch-mock/es5/client.js":"'use strict';\n\nvar FetchMock = require('./fetch-mock');\nvar statusTextMap = require('./status-text');\nvar theGlobal = typeof window !== 'undefined' ? window : self;\n\nFetchMock.global = theGlobal;\nFetchMock.statusTextMap = statusTextMap;\n\nFetchMock.setImplementations({\n\tPromise: theGlobal.Promise,\n\tRequest: theGlobal.Request,\n\tResponse: theGlobal.Response,\n\tHeaders: theGlobal.Headers\n});\n\nmodule.exports = new FetchMock();","/home/travis/build/npmtest/node-npmtest-fetch-mock/node_modules/fetch-mock/es5/fetch-mock.js":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar compileRoute = require('./compile-route');\n\nvar FetchMock = function FetchMock() {\n\n\tthis.routes = [];\n\tthis._calls = {};\n\tthis._matchedCalls = [];\n\tthis._unmatchedCalls = [];\n\tthis.bindMethods();\n};\n\nFetchMock.prototype.bindMethods = function () {\n\tthis.fetchMock = FetchMock.prototype.fetchMock.bind(this);\n\tthis.restore = FetchMock.prototype.restore.bind(this);\n\tthis.reset = FetchMock.prototype.reset.bind(this);\n};\n\nFetchMock.prototype.mock = function (matcher, response, options) {\n\n\tvar route = void 0;\n\n\t// Handle the variety of parameters accepted by mock (see README)\n\tif (matcher && response && options) {\n\t\troute = _extends({\n\t\t\tmatcher: matcher,\n\t\t\tresponse: response\n\t\t}, options);\n\t} else if (matcher && response) {\n\t\troute = {\n\t\t\tmatcher: matcher,\n\t\t\tresponse: response\n\t\t};\n\t} else if (matcher && matcher.matcher) {\n\t\troute = matcher;\n\t} else {\n\t\tthrow new Error('Invalid parameters passed to fetch-mock');\n\t}\n\n\tthis.addRoute(route);\n\n\treturn this._mock();\n};\n\nFetchMock.prototype.once = function (matcher, response, options) {\n\treturn this.mock(matcher, response, _extends({}, options, { times: 1 }));\n};\n\nFetchMock.prototype._mock = function () {\n\tif (!this.isSandbox) {\n\t\t// Do this here rather than in the constructor to ensure it's scoped to the test\n\t\tthis.realFetch = this.realFetch || FetchMock.global.fetch;\n\t\tFetchMock.global.fetch = this.fetchMock;\n\t}\n\treturn this;\n};\n\nFetchMock.prototype._unMock = function () {\n\tif (this.realFetch) {\n\t\tFetchMock.global.fetch = this.realFetch;\n\t\tthis.realFetch = null;\n\t}\n\tthis.fallbackResponse = null;\n\treturn this;\n};\n\nFetchMock.prototype.catch = function (response) {\n\tif (this.fallbackResponse) {\n\t\tconsole.warn('calling fetchMock.catch() twice - are you sure you want to overwrite the previous fallback response');\n\t}\n\tthis.fallbackResponse = response || 'ok';\n\treturn this._mock();\n};\n\nFetchMock.prototype.spy = function () {\n\tthis._mock();\n\treturn this.catch(this.realFetch);\n};\n\nFetchMock.prototype.fetchMock = function (url, opts) {\n\tvar _this = this;\n\n\tvar Promise = this.Promise || FetchMock.Promise;\n\tvar response = this.router(url, opts);\n\n\tif (!response) {\n\t\tconsole.warn('Unmatched ' + (opts && opts.method || 'GET') + ' to ' + url);\n\t\tthis.push(null, [url, opts]);\n\n\t\tif (this.fallbackResponse) {\n\t\t\tresponse = this.fallbackResponse;\n\t\t} else {\n\t\t\tthrow new Error('No fallback response defined for ' + (opts && opts.method || 'GET') + ' to ' + url);\n\t\t}\n\t}\n\n\tif (typeof response === 'function') {\n\t\tresponse = response(url, opts);\n\t}\n\n\tif (typeof response.then === 'function') {\n\t\tvar responsePromise = response.then(function (response) {\n\t\t\treturn _this.mockResponse(url, response, opts);\n\t\t});\n\t\treturn Promise.resolve(responsePromise); // Ensure Promise is always our implementation.\n\t} else {\n\t\treturn this.mockResponse(url, response, opts);\n\t}\n};\n\nFetchMock.prototype.router = function (url, opts) {\n\tvar route = void 0;\n\tfor (var i = 0, il = this.routes.length; i < il; i++) {\n\t\troute = this.routes[i];\n\t\tif (route.matcher(url, opts)) {\n\t\t\tthis.push(route.name, [url, opts]);\n\t\t\treturn route.response;\n\t\t}\n\t}\n};\n\nFetchMock.prototype.addRoute = function (route) {\n\n\tif (!route) {\n\t\tthrow new Error('.mock() must be passed configuration for a route');\n\t}\n\n\t// Allows selective application of some of the preregistered routes\n\tthis.routes.push(compileRoute(route, FetchMock.Request));\n};\n\nFetchMock.prototype.mockResponse = function (url, responseConfig, fetchOpts) {\n\tvar Promise = this.Promise || FetchMock.Promise;\n\n\t// It seems odd to call this in here even though it's already called within fetchMock\n\t// It's to handle the fact that because we want to support making it very easy to add a\n\t// delay to any sort of response (including responses which are defined with a function)\n\t// while also allowing function responses to return a Promise for a response config.\n\tif (typeof responseConfig === 'function') {\n\t\tresponseConfig = responseConfig(url, fetchOpts);\n\t}\n\n\tif (FetchMock.Response.prototype.isPrototypeOf(responseConfig)) {\n\t\treturn Promise.resolve(responseConfig);\n\t}\n\n\tif (responseConfig.throws) {\n\t\treturn Promise.reject(responseConfig.throws);\n\t}\n\n\tif (typeof responseConfig === 'number') {\n\t\tresponseConfig = {\n\t\t\tstatus: responseConfig\n\t\t};\n\t} else if (typeof responseConfig === 'string' || !(responseConfig.body || responseConfig.headers || responseConfig.throws || responseConfig.status)) {\n\t\tresponseConfig = {\n\t\t\tbody: responseConfig\n\t\t};\n\t}\n\n\tvar opts = responseConfig.opts || {};\n\topts.url = url;\n\topts.sendAsJson = responseConfig.sendAsJson === undefined ? FetchMock.config.sendAsJson : responseConfig.sendAsJson;\n\tif (responseConfig.status && (typeof responseConfig.status !== 'number' || parseInt(responseConfig.status, 10) !== responseConfig.status || responseConfig.status < 200 || responseConfig.status > 599)) {\n\t\tthrow new TypeError('Invalid status ' + responseConfig.status + ' passed on response object.\\nTo respond with a JSON object that has status as a property assign the object to body\\ne.g. {\"body\": {\"status: \"registered\"}}');\n\t}\n\topts.status = responseConfig.status || 200;\n\topts.statusText = FetchMock.statusTextMap['' + opts.status];\n\t// The ternary operator is to cope with new Headers(undefined) throwing in Chrome\n\t// https://code.google.com/p/chromium/issues/detail?id=335871\n\topts.headers = responseConfig.headers ? new FetchMock.Headers(responseConfig.headers) : new FetchMock.Headers();\n\n\tvar body = responseConfig.body;\n\tif (opts.sendAsJson && responseConfig.body != null && (typeof body === 'undefined' ? 'undefined' : _typeof(body)) === 'object') {\n\t\t//eslint-disable-line\n\t\tbody = JSON.stringify(body);\n\t}\n\n\tif (FetchMock.stream) {\n\t\tvar s = new FetchMock.stream.Readable();\n\t\tif (body != null) {\n\t\t\t//eslint-disable-line\n\t\t\ts.push(body, 'utf-8');\n\t\t}\n\t\ts.push(null);\n\t\tbody = s;\n\t}\n\n\treturn Promise.resolve(new FetchMock.Response(body, opts));\n};\n\nFetchMock.prototype.push = function (name, call) {\n\tif (name) {\n\t\tthis._calls[name] = this._calls[name] || [];\n\t\tthis._calls[name].push(call);\n\t\tthis._matchedCalls.push(call);\n\t} else {\n\t\tthis._unmatchedCalls.push(call);\n\t}\n};\n\nFetchMock.prototype.restore = function () {\n\tthis._unMock();\n\tthis.reset();\n\tthis.routes = [];\n\treturn this;\n};\n\nFetchMock.prototype.reset = function () {\n\tthis._calls = {};\n\tthis._matchedCalls = [];\n\tthis._unmatchedCalls = [];\n\tthis.routes.forEach(function (route) {\n\t\treturn route.reset && route.reset();\n\t});\n\treturn this;\n};\n\nFetchMock.prototype.calls = function (name) {\n\treturn name ? this._calls[name] || [] : {\n\t\tmatched: this._matchedCalls,\n\t\tunmatched: this._unmatchedCalls\n\t};\n};\n\nFetchMock.prototype.lastCall = function (name) {\n\tvar calls = name ? this.calls(name) : this.calls().matched;\n\tif (calls && calls.length) {\n\t\treturn calls[calls.length - 1];\n\t} else {\n\t\treturn undefined;\n\t}\n};\n\nFetchMock.prototype.lastUrl = function (name) {\n\tvar call = this.lastCall(name);\n\treturn call && call[0];\n};\n\nFetchMock.prototype.lastOptions = function (name) {\n\tvar call = this.lastCall(name);\n\treturn call && call[1];\n};\n\nFetchMock.prototype.called = function (name) {\n\tif (!name) {\n\t\treturn !!(this._matchedCalls.length || this._unmatchedCalls.length);\n\t}\n\treturn !!(this._calls[name] && this._calls[name].length);\n};\n\nFetchMock.prototype.done = function (name) {\n\tvar _this2 = this;\n\n\tvar names = name ? [name] : this.routes.map(function (r) {\n\t\treturn r.name;\n\t});\n\t// Can't use array.every because\n\t// a) not widely supported\n\t// b) would exit after first failure, which would break the logging\n\treturn names.map(function (name) {\n\t\tif (!_this2.called(name)) {\n\t\t\tconsole.warn('Warning: ' + name + ' not called');\n\t\t\treturn false;\n\t\t}\n\t\t// would use array.find... but again not so widely supported\n\t\tvar expectedTimes = (_this2.routes.filter(function (r) {\n\t\t\treturn r.name === name;\n\t\t}) || [{}])[0].times;\n\n\t\tif (!expectedTimes) {\n\t\t\treturn true;\n\t\t}\n\n\t\tvar actualTimes = _this2.calls(name).length;\n\t\tif (expectedTimes > actualTimes) {\n\t\t\tconsole.warn('Warning: ' + name + ' only called ' + actualTimes + ' times, but ' + expectedTimes + ' expected');\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}).filter(function (bool) {\n\t\treturn !bool;\n\t}).length === 0;\n};\n\nFetchMock.config = {\n\tsendAsJson: true\n};\n\nFetchMock.prototype.configure = function (opts) {\n\t_extends(FetchMock.config, opts);\n};\n\nFetchMock.setImplementations = FetchMock.prototype.setImplementations = function (implementations) {\n\tFetchMock.Headers = implementations.Headers || FetchMock.Headers;\n\tFetchMock.Request = implementations.Request || FetchMock.Request;\n\tFetchMock.Response = implementations.Response || FetchMock.Response;\n\tFetchMock.Promise = implementations.Promise || FetchMock.Promise;\n};\n\nFetchMock.prototype.sandbox = function (Promise) {\n\tif (this.routes.length || this.fallbackResponse) {\n\t\tthrow new Error('.sandbox() can only be called on fetch-mock instances that don\\'t have routes configured already');\n\t}\n\tvar instance = new FetchMock();\n\n\t// this construct allows us to create a fetch-mock instance which is also\n\t// a callable function, while circumventing circularity when defining the\n\t// object that this function should be bound to\n\tvar boundMock = void 0;\n\tvar proxy = function proxy() {\n\t\treturn boundMock.apply(null, arguments);\n\t};\n\n\tvar functionInstance = _extends(proxy, // Ensures that the entire returned object is a callable function\n\tFetchMock.prototype, // all prototype methods\n\tinstance // instance data\n\t);\n\tfunctionInstance.bindMethods();\n\tboundMock = functionInstance.fetchMock;\n\tfunctionInstance.isSandbox = true;\n\tif (Promise) {\n\t\tfunctionInstance.Promise = Promise;\n\t}\n\n\treturn functionInstance;\n};\n\n['get', 'post', 'put', 'delete', 'head', 'patch'].forEach(function (method) {\n\tFetchMock.prototype[method] = function (matcher, response, options) {\n\t\treturn this.mock(matcher, response, _extends({}, options, { method: method.toUpperCase() }));\n\t};\n\tFetchMock.prototype[method + 'Once'] = function (matcher, response, options) {\n\t\treturn this.once(matcher, response, _extends({}, options, { method: method.toUpperCase() }));\n\t};\n});\n\nmodule.exports = FetchMock;","/home/travis/build/npmtest/node-npmtest-fetch-mock/node_modules/fetch-mock/es5/compile-route.js":"'use strict';\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _glob = require('glob-to-regexp');\nvar _express = require('path-to-regexp');\n\nvar stringMatchers = {\n\tbegin: function begin(targetString) {\n\t\treturn function (url) {\n\t\t\treturn url.indexOf(targetString) === 0;\n\t\t};\n\t},\n\tend: function end(targetString) {\n\t\treturn function (url) {\n\t\t\treturn url.substr(-targetString.length) === targetString;\n\t\t};\n\t},\n\tglob: function glob(targetString) {\n\t\tvar urlRX = _glob(targetString.replace(/^glob:/, ''));\n\t\treturn function (url) {\n\t\t\treturn urlRX.test(url);\n\t\t};\n\t},\n\texpress: function express(targetString) {\n\t\tvar urlRX = _express(targetString.replace(/^express:/, ''));\n\t\treturn function (url) {\n\t\t\treturn urlRX.test(url);\n\t\t};\n\t}\n};\n\nfunction getHeaderMatcher(expectedHeaders) {\n\tvar expectation = Object.keys(expectedHeaders).map(function (k) {\n\t\treturn { key: k.toLowerCase(), val: expectedHeaders[k] };\n\t});\n\treturn function (headers) {\n\t\tif (!headers) {\n\t\t\theaders = {};\n\t\t}\n\t\tvar lowerCaseHeaders = Object.keys(headers).reduce(function (obj, k) {\n\t\t\tobj[k.toLowerCase()] = headers[k];\n\t\t\treturn obj;\n\t\t}, {});\n\t\treturn expectation.every(function (header) {\n\t\t\treturn lowerCaseHeaders[header.key] === header.val;\n\t\t});\n\t};\n}\n\nfunction normalizeRequest(url, options, Request) {\n\tif (Request.prototype.isPrototypeOf(url)) {\n\t\treturn {\n\t\t\turl: url.url,\n\t\t\tmethod: url.method,\n\t\t\theaders: function () {\n\t\t\t\tvar headers = {};\n\t\t\t\turl.headers.forEach(function (name) {\n\t\t\t\t\treturn headers[name] = url.headers.name;\n\t\t\t\t});\n\t\t\t\treturn headers;\n\t\t\t}()\n\t\t};\n\t} else {\n\t\treturn {\n\t\t\turl: url,\n\t\t\tmethod: options && options.method || 'GET',\n\t\t\theaders: options && options.headers\n\t\t};\n\t}\n}\n\nmodule.exports = function (route, Request) {\n\troute = _extends({}, route);\n\n\tif (typeof route.response === 'undefined') {\n\t\tthrow new Error('Each route must define a response');\n\t}\n\n\tif (!route.matcher) {\n\t\tthrow new Error('each route must specify a string, regex or function to match calls to fetch');\n\t}\n\n\tif (!route.name) {\n\t\troute.name = route.matcher.toString();\n\t\troute.__unnamed = true;\n\t}\n\n\t// If user has provided a function as a matcher we assume they are handling all the\n\t// matching logic they need\n\tif (typeof route.matcher === 'function') {\n\t\treturn route;\n\t}\n\n\tvar expectedMethod = route.method && route.method.toLowerCase();\n\n\tfunction matchMethod(method) {\n\t\treturn !expectedMethod || expectedMethod === (method ? method.toLowerCase() : 'get');\n\t};\n\n\tvar matchHeaders = route.headers ? getHeaderMatcher(route.headers) : function () {\n\t\treturn true;\n\t};\n\n\tvar matchUrl = void 0;\n\n\tif (typeof route.matcher === 'string') {\n\n\t\tObject.keys(stringMatchers).some(function (name) {\n\t\t\tif (route.matcher.indexOf(name + ':') === 0) {\n\t\t\t\tvar url = route.matcher.replace(new RegExp('^' + name + ':'), '');\n\t\t\t\tmatchUrl = stringMatchers[name](url);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\tif (!matchUrl) {\n\t\t\tif (route.matcher === '*') {\n\t\t\t\tmatchUrl = function matchUrl() {\n\t\t\t\t\treturn true;\n\t\t\t\t};\n\t\t\t} else if (route.matcher.indexOf('^') === 0) {\n\t\t\t\t(function () {\n\t\t\t\t\tconsole.warn('Using \\'^\\' to denote the start of a url is deprecated. Use \\'begin:\\' instead');\n\t\t\t\t\tvar expectedUrl = route.matcher.substr(1);\n\t\t\t\t\tmatchUrl = function matchUrl(url) {\n\t\t\t\t\t\treturn url.indexOf(expectedUrl) === 0;\n\t\t\t\t\t};\n\t\t\t\t})();\n\t\t\t} else {\n\t\t\t\t(function () {\n\t\t\t\t\tvar expectedUrl = route.matcher;\n\t\t\t\t\tmatchUrl = function matchUrl(url) {\n\t\t\t\t\t\treturn url === expectedUrl;\n\t\t\t\t\t};\n\t\t\t\t})();\n\t\t\t}\n\t\t}\n\t} else if (route.matcher instanceof RegExp) {\n\t\t(function () {\n\t\t\tvar urlRX = route.matcher;\n\t\t\tmatchUrl = function matchUrl(url) {\n\t\t\t\treturn urlRX.test(url);\n\t\t\t};\n\t\t})();\n\t}\n\n\tvar matcher = function matcher(url, options) {\n\t\tvar req = normalizeRequest(url, options, Request);\n\t\treturn matchHeaders(req.headers) && matchMethod(req.method) && matchUrl(req.url);\n\t};\n\n\tif (route.times) {\n\t\t(function () {\n\t\t\tvar timesLeft = route.times;\n\t\t\troute.matcher = function (url, options) {\n\t\t\t\tvar match = timesLeft && matcher(url, options);\n\t\t\t\tif (match) {\n\t\t\t\t\ttimesLeft--;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t};\n\t\t\troute.reset = function () {\n\t\t\t\treturn timesLeft = route.times;\n\t\t\t};\n\t\t})();\n\t} else {\n\t\troute.matcher = matcher;\n\t}\n\n\treturn route;\n};","/home/travis/build/npmtest/node-npmtest-fetch-mock/node_modules/fetch-mock/es5/status-text.js":"'use strict';\n\nvar statusTextMap = {\n  '100': 'Continue',\n  '101': 'Switching Protocols',\n  '102': 'Processing',\n  '200': 'OK',\n  '201': 'Created',\n  '202': 'Accepted',\n  '203': 'Non-Authoritative Information',\n  '204': 'No Content',\n  '205': 'Reset Content',\n  '206': 'Partial Content',\n  '207': 'Multi-Status',\n  '208': 'Already Reported',\n  '226': 'IM Used',\n  '300': 'Multiple Choices',\n  '301': 'Moved Permanently',\n  '302': 'Found',\n  '303': 'See Other',\n  '304': 'Not Modified',\n  '305': 'Use Proxy',\n  '307': 'Temporary Redirect',\n  '308': 'Permanent Redirect',\n  '400': 'Bad Request',\n  '401': 'Unauthorized',\n  '402': 'Payment Required',\n  '403': 'Forbidden',\n  '404': 'Not Found',\n  '405': 'Method Not Allowed',\n  '406': 'Not Acceptable',\n  '407': 'Proxy Authentication Required',\n  '408': 'Request Timeout',\n  '409': 'Conflict',\n  '410': 'Gone',\n  '411': 'Length Required',\n  '412': 'Precondition Failed',\n  '413': 'Payload Too Large',\n  '414': 'URI Too Long',\n  '415': 'Unsupported Media Type',\n  '416': 'Range Not Satisfiable',\n  '417': 'Expectation Failed',\n  '418': 'I\\'m a teapot',\n  '421': 'Misdirected Request',\n  '422': 'Unprocessable Entity',\n  '423': 'Locked',\n  '424': 'Failed Dependency',\n  '425': 'Unordered Collection',\n  '426': 'Upgrade Required',\n  '428': 'Precondition Required',\n  '429': 'Too Many Requests',\n  '431': 'Request Header Fields Too Large',\n  '451': 'Unavailable For Legal Reasons',\n  '500': 'Internal Server Error',\n  '501': 'Not Implemented',\n  '502': 'Bad Gateway',\n  '503': 'Service Unavailable',\n  '504': 'Gateway Timeout',\n  '505': 'HTTP Version Not Supported',\n  '506': 'Variant Also Negotiates',\n  '507': 'Insufficient Storage',\n  '508': 'Loop Detected',\n  '509': 'Bandwidth Limit Exceeded',\n  '510': 'Not Extended',\n  '511': 'Network Authentication Required'\n};\n\nmodule.exports = statusTextMap;","/home/travis/build/npmtest/node-npmtest-fetch-mock/node_modules/fetch-mock/es5/server.js":"'use strict';\n\nvar fetch = require('node-fetch');\nvar Request = fetch.Request;\nvar Response = fetch.Response;\nvar Headers = fetch.Headers;\nvar stream = require('stream');\nvar FetchMock = require('./fetch-mock');\nvar http = require('http');\n\nFetchMock.global = global;\nFetchMock.statusTextMap = http.STATUS_CODES;\nFetchMock.stream = stream;\n\nFetchMock.setImplementations({\n\tPromise: Promise,\n\tRequest: Request,\n\tResponse: Response,\n\tHeaders: Headers\n});\n\nmodule.exports = new FetchMock();","/home/travis/build/npmtest/node-npmtest-fetch-mock/node_modules/fetch-mock/src/client.js":"'use strict';\n\nconst FetchMock = require('./fetch-mock');\nconst statusTextMap = require('./status-text');\nconst theGlobal = typeof window !== 'undefined' ? window : self;\n\nFetchMock.global = theGlobal;\nFetchMock.statusTextMap = statusTextMap;\n\nFetchMock.setImplementations({\n\tPromise: theGlobal.Promise,\n\tRequest: theGlobal.Request,\n\tResponse: theGlobal.Response,\n\tHeaders: theGlobal.Headers\n});\n\nmodule.exports = new FetchMock()","/home/travis/build/npmtest/node-npmtest-fetch-mock/node_modules/fetch-mock/src/status-text.js":"'use strict';\n\nconst statusTextMap = {\n  '100': 'Continue',\n  '101': 'Switching Protocols',\n  '102': 'Processing',\n  '200': 'OK',\n  '201': 'Created',\n  '202': 'Accepted',\n  '203': 'Non-Authoritative Information',\n  '204': 'No Content',\n  '205': 'Reset Content',\n  '206': 'Partial Content',\n  '207': 'Multi-Status',\n  '208': 'Already Reported',\n  '226': 'IM Used',\n  '300': 'Multiple Choices',\n  '301': 'Moved Permanently',\n  '302': 'Found',\n  '303': 'See Other',\n  '304': 'Not Modified',\n  '305': 'Use Proxy',\n  '307': 'Temporary Redirect',\n  '308': 'Permanent Redirect',\n  '400': 'Bad Request',\n  '401': 'Unauthorized',\n  '402': 'Payment Required',\n  '403': 'Forbidden',\n  '404': 'Not Found',\n  '405': 'Method Not Allowed',\n  '406': 'Not Acceptable',\n  '407': 'Proxy Authentication Required',\n  '408': 'Request Timeout',\n  '409': 'Conflict',\n  '410': 'Gone',\n  '411': 'Length Required',\n  '412': 'Precondition Failed',\n  '413': 'Payload Too Large',\n  '414': 'URI Too Long',\n  '415': 'Unsupported Media Type',\n  '416': 'Range Not Satisfiable',\n  '417': 'Expectation Failed',\n  '418': 'I\\'m a teapot',\n  '421': 'Misdirected Request',\n  '422': 'Unprocessable Entity',\n  '423': 'Locked',\n  '424': 'Failed Dependency',\n  '425': 'Unordered Collection',\n  '426': 'Upgrade Required',\n  '428': 'Precondition Required',\n  '429': 'Too Many Requests',\n  '431': 'Request Header Fields Too Large',\n  '451': 'Unavailable For Legal Reasons',\n  '500': 'Internal Server Error',\n  '501': 'Not Implemented',\n  '502': 'Bad Gateway',\n  '503': 'Service Unavailable',\n  '504': 'Gateway Timeout',\n  '505': 'HTTP Version Not Supported',\n  '506': 'Variant Also Negotiates',\n  '507': 'Insufficient Storage',\n  '508': 'Loop Detected',\n  '509': 'Bandwidth Limit Exceeded',\n  '510': 'Not Extended',\n  '511': 'Network Authentication Required'\n};\n\nmodule.exports = statusTextMap;\n"}